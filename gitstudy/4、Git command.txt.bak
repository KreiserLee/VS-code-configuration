git init  ―――――― 将当前目录配置成功git仓库

git clone ―――――― 用远程仓库初始化本地目录

git status―――――― 查看哪些文件处于什么状态
$ git status -s  得到紧凑的格式输出

git add   ―――――― 跟踪新文件；将文件添加到暂存区
使用文件或目录的路径作为参数；如果参数是目录的路径，该命令将递归地跟踪该目录下的所有文件。

git rm    ―――――― 删除文件
如果删除之前修改过并且已经放到暂存区域的话，则必须要用强制删除选项 -f
移除文件
要从 Git 中移除某个文件，就必须要从已跟踪文件清单中移除（确切地说，是从暂存区域移除），
然后提交。 可以用 git rm 命令完成此项工作，并连带从工作目录中删除指定的文件，这样以后
就不会出现在未跟踪文件清单中了。
$ git rm --cached README
把文件从 Git 仓库中删除（亦即从暂存区域移除），但仍然希望保留在当前工作目录中。

git mv
$ git mv file_from file_to
git mv 就相当于运行了下面三条命令：
$ mv README.md README
$ git rm README.md
$ git add README

git commit―――――― 提交更新
git commit -m ""  ―――― 将提交信息与命令放在同一行
git commit -a -m  ―――― 跳过使用暂存区域，会自动把所有已经跟踪过的文件暂存起来一并提交，从而跳过 git add 步骤

git diff ―――― 要查看尚未暂存的文件更新了哪些部分，不加参数直接输入 
git diff --cached ―――― 要查看已暂存的将要添加到下次提交里的内容
Git Diff 的插件版本

在本书中，我们使用 git diff 来分析文件差异。 但是，如果你喜欢通过图形化的方式或其它格式输出方式的话，可以
使用 git difftool 命令来用 Araxis ，emerge 或 vimdiff 等软件输出 diff 分析结果。 使用 git difftool --tool-help 命令
来看你的系统支持哪些 Git Diff 插件。

git commit --amend ―――― 运行带有 --amend 选项的提交命令尝试重新提交

git reset HEAD <file>... ―――― 取消暂存

git checkout -- [file]  ―――― 你对那个文件做的任何修改都会消失 - 你只是拷贝了另一个文件来覆盖它。

使用Git提交文件到版本库有两步：

  第一步：是使用 git add 把文件添加进去，实际上就是把文件添加到暂存区。

  第二步：使用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支上。


